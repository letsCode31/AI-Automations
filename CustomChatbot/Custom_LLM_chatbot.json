{
  "name": "Custom LLM chatbot",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -660,
        -120
      ],
      "id": "0b0106c3-1786-45cf-bcc1-78348106bcce",
      "name": "Telegram Trigger",
      "webhookId": "84f6c6d3-1a70-41e4-9735-00146f758162",
      "credentials": {
        "telegramApi": {
          "id": "XsA3XsMwgoF9YT5p",
          "name": "CustomLLM chat"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.from.id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1140,
        160
      ],
      "id": "59e55d91-a3e5-4bb0-9ee7-0a85df6c1386",
      "name": "Telegram3",
      "webhookId": "5ffc3c1b-67c6-4b39-9e3b-5d1d0b5335b7",
      "credentials": {
        "telegramApi": {
          "id": "XsA3XsMwgoF9YT5p",
          "name": "CustomLLM chat"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ed31a5d4-1118-4181-82e0-d495f7816ddd",
              "leftValue": "={{ $json.message.text.toLowerCase() }}",
              "rightValue": "hey",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "4b1a9ddc-d801-4b30-bd7f-c0d119facb72",
              "leftValue": "={{ $json.message.text.toLowerCase() }}",
              "rightValue": "hello",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "d3c991b7-d51d-403a-8936-d1b68a453c7f",
              "leftValue": "={{ $json.message.text.toLowerCase() }}",
              "rightValue": "hi",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -440,
        -120
      ],
      "id": "131d1b60-806e-41b1-8cfd-223105e6bf08",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "const MAX_LENGTH = 4095;\nconst fullText = $input.first().json.output;\n\nconst result = [];\n\nfor (let i = 0; i < fullText.length; i += MAX_LENGTH) {\n  result.push({\n    json: {\n      text: fullText.slice(i, i + MAX_LENGTH)\n    }\n  });\n}\n\nreturn result;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        920,
        160
      ],
      "id": "32934062-a019-4950-bf4b-d51907da8dc2",
      "name": "Code3"
    },
    {
      "parameters": {
        "jsCode": "// Run this Function node in “Run Once for All Items” mode\n\n// 1) Get the raw payload from the single incoming item\nconst raw = items[0].json.Model;\n\n// 2) If it's already an array, use it; otherwise fall back to mapping each item\nconst fullModels = Array.isArray(raw)\n  ? raw\n  : items.map(i => i.json.Model);\n\n// 3) Build the numbered list with real newline characters\nconst numberedLines = fullModels\n  .map((model, idx) => `${idx + 1}. ${model}`)\n  .join('\\n');\n\n// 4) Assemble your Telegram‐ready message\nconst message = `🧠 Available Models\n\nPlease choose a model by replying with its number:\n\n${numberedLines}\n\n➡️ Reply with just the number (e.g., 3) to select your model.`;\n\n// 5) Return it\nreturn [\n  {\n    json: {\n      text: message\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        100,
        -180
      ],
      "id": "300e6605-f3f9-4b5d-8351-c78110537c86",
      "name": "List Models"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "message": "Which model do you want to talk to?",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Choose Model",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "={{ $json.Claude }}"
                  },
                  {
                    "option": "={{ $json.Perplexity }}"
                  },
                  {
                    "option": "={{ $json.Google }}"
                  },
                  {
                    "option": "={{ $json.OpenAI }}"
                  },
                  {
                    "option": "={{ $json['X (Grok)'] }}"
                  },
                  {
                    "option": "={{ $json.DeepSeek }}"
                  }
                ]
              },
              "requiredField": true
            }
          ]
        },
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        920,
        -400
      ],
      "id": "eb77e1cb-9517-4590-82c9-adf749381c25",
      "name": "Ask for LLM",
      "webhookId": "cce67d40-384d-47e5-a6f9-c6f693f1ed85",
      "credentials": {
        "telegramApi": {
          "id": "XsA3XsMwgoF9YT5p",
          "name": "CustomLLM chat"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Get the text block that contains the list of models\nconst modelsText = $('List Models').first().json.text;\n\n// 2. Split the text into individual lines\nconst modelLines = modelsText.split('\\n').filter(line => line.trim() !== '');\n\n// 3. Extract just the model names from each line (e.g., from \"1. model-name\")\nconst models = modelLines.map(line => {\n  const match = line.match(/^\\d+\\.\\s+(.*)$/);\n  return match ? match[1].trim() : null;\n}).filter(Boolean);\n\n// 4. Get the user's input number (from Telegram)\nconst userInput = $input.first().json.data.text.trim();\nconst selectedIndex = parseInt(userInput, 10) - 1;\n\n// 5. Validate input\nif (isNaN(selectedIndex) || selectedIndex < 0 || selectedIndex >= models.length) {\n  throw new Error(`Invalid selection: \"${userInput}\". Please enter a number between 1 and ${models.length}.`);\n}\n\n// 6. Return the selected model\nconst selectedModel = models[selectedIndex];\n\nreturn [\n  {\n    json: {\n      selectedModel,\n      index: selectedIndex + 1\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        520,
        -180
      ],
      "id": "ad9a6cc7-dbf6-477e-a637-0cc70dd703c8",
      "name": "Select Chosen Model"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').first().json.message.from.id }}",
        "text": "=Hey, I am  {{ $json.Model }}\n\nLet's chat.",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1120,
        -180
      ],
      "id": "9ecfa505-f2fc-4789-8301-03d63645932d",
      "name": "Start Chatting",
      "webhookId": "b3624839-a733-4cc9-aec6-06b75f94cad2",
      "credentials": {
        "telegramApi": {
          "id": "XsA3XsMwgoF9YT5p",
          "name": "CustomLLM chat"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "chatId": "={{ $('Telegram Trigger').first().json.message.from.id }}",
        "message": "={{ $json.text }}",
        "responseType": "freeText",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        300,
        -180
      ],
      "id": "86719646-1264-44b8-bee1-75cb411beee8",
      "name": "Ask model preference",
      "webhookId": "aa49d413-da16-4b29-8c4c-97b77e181100",
      "credentials": {
        "telegramApi": {
          "id": "XsA3XsMwgoF9YT5p",
          "name": "CustomLLM chat"
        }
      }
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "LLM",
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        300,
        -400
      ],
      "id": "de198c46-1173-41af-8195-93d094574033",
      "name": "Remove Duplicates"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "workspaceId": "wzvndt6m",
        "projectId": "p9y5knkvzjsk8sp",
        "table": "mepz33psictb4m0",
        "returnAll": true,
        "options": {
          "fields": [
            "LLM"
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        100,
        -400
      ],
      "id": "eeea4b9e-41b3-4937-964d-db26eaa4f0f0",
      "name": "NocoDB",
      "credentials": {
        "nocoDbApiToken": {
          "id": "fzHxsgiixB6AWxWg",
          "name": "NocoDB DD"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "LLM"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        520,
        -400
      ],
      "id": "a145a7f6-5556-43f2-92b2-185f569f8394",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b0f77004-9d75-4587-a1b3-8674a8859727",
              "name": "Google",
              "value": "={{ $json.LLM[2] }}",
              "type": "string"
            },
            {
              "id": "41e2f63f-8328-44ef-a44b-3cb6e903c3ba",
              "name": "OpenAI",
              "value": "={{ $json.LLM[4] }}",
              "type": "string"
            },
            {
              "id": "7c4ebc3c-d3b3-46ce-957a-39c8747252a2",
              "name": "Claude",
              "value": "={{ $json.LLM[10] }}",
              "type": "string"
            },
            {
              "id": "a38d958d-e397-4fa6-8bd9-31c7da46df0c",
              "name": "Perplexity",
              "value": "={{ $json.LLM[31] }}",
              "type": "string"
            },
            {
              "id": "0c56f6dd-677e-457b-918d-98220ce21eb0",
              "name": "X (Grok)",
              "value": "={{ $json.LLM[5] }}",
              "type": "string"
            },
            {
              "id": "42de26b9-2217-4287-9459-519aa2adf8f4",
              "name": "DeepSeek",
              "value": "={{ $json.LLM[7] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        700,
        -400
      ],
      "id": "bfb318f5-4972-4fb0-8813-249ad8529ebc",
      "name": "LLM Names Set"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "getAll",
        "workspaceId": "wzvndt6m",
        "projectId": "p9y5knkvzjsk8sp",
        "table": "mepz33psictb4m0",
        "returnAll": true,
        "options": {
          "where": "=(LLM,eq,{{ $json.data['Choose Model'] }})"
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        1120,
        -400
      ],
      "id": "37441fa4-bb55-41e8-b6a0-1a6da58b70ed",
      "name": "NocoDB1",
      "credentials": {
        "nocoDbApiToken": {
          "id": "fzHxsgiixB6AWxWg",
          "name": "NocoDB DD"
        }
      }
    },
    {
      "parameters": {
        "fieldsToAggregate": {
          "fieldToAggregate": [
            {
              "fieldToAggregate": "Model"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1340,
        -400
      ],
      "id": "e8db51aa-f050-497d-a177-510da33aae47",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "create",
        "workspaceId": "wzvndt6m",
        "projectId": "p9y5knkvzjsk8sp",
        "table": "mafs4l2g8uhsh2l",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Model",
              "fieldValue": "={{ $json.selectedModel }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        700,
        -180
      ],
      "id": "3f9a8d5f-94fd-48f5-82ed-5a5a4b9f406a",
      "name": "Update History",
      "credentials": {
        "nocoDbApiToken": {
          "id": "fzHxsgiixB6AWxWg",
          "name": "NocoDB DD"
        }
      }
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "operation": "update",
        "workspaceId": "wzvndt6m",
        "projectId": "p9y5knkvzjsk8sp",
        "table": "mwvaqr16137xqxc",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldName": "Id",
              "fieldValue": "1"
            },
            {
              "fieldName": "Model",
              "fieldValue": "={{ $json.Model }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        920,
        -180
      ],
      "id": "b0d73220-6ec6-49c5-924c-545a2f560d9d",
      "name": "NocoDB2",
      "credentials": {
        "nocoDbApiToken": {
          "id": "fzHxsgiixB6AWxWg",
          "name": "NocoDB DD"
        }
      }
    },
    {
      "parameters": {
        "content": "## Choose Model\n",
        "height": 480,
        "width": 1520,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        40,
        -480
      ],
      "id": "69cd5554-2bd8-4cf1-982d-d5cbf6b07324",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Initiate Chatbot",
        "height": 480,
        "width": 1520,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        40,
        40
      ],
      "id": "c1200c05-d4bf-448b-b1ed-8e8cf32d9afc",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "authentication": "nocoDbApiToken",
        "workspaceId": "wzvndt6m",
        "projectId": "p9y5knkvzjsk8sp",
        "table": "mwvaqr16137xqxc",
        "id": "1"
      },
      "type": "n8n-nodes-base.nocoDb",
      "typeVersion": 3,
      "position": [
        100,
        160
      ],
      "id": "2ba37b5f-11c1-43dc-88a8-335ecb21729e",
      "name": "NocoDB3",
      "credentials": {
        "nocoDbApiToken": {
          "id": "fzHxsgiixB6AWxWg",
          "name": "NocoDB DD"
        }
      }
    },
    {
      "parameters": {
        "text": "=\nmodel selected by user to talk to : {{ $json.model }}\n\nUser message: {{ $('Telegram Trigger').item.json.message.text }}\n\n\n",
        "options": {
          "humanMessage": "TOOLS\n------\nAssistant can ask the user to use tools to look up information that may be helpful in answering the users original question. The tools the human can use are:\n\n{tools}\n\n{format_instructions}\n\nUSER'S INPUT\n--------------------\nHere is the user's input (remember to respond with a markdown code snippet of a json blob with a single action, and NOTHING else):\n\n{{input}}",
          "systemMessage": "=You are a helpful AI assistant. You are chatting with the user named `{{ $('Telegram Trigger').first().json.message.from.first_name }}`. \nToday is {{ DateTime.fromISO($now).toLocaleString(DateTime.DATETIME_FULL) }}\nThen the user will initiate the conversation. Once converstaion is received, proceed accordingly. \nFrom time to time call a user by name (if the user name is provided). \n\nReply like you are replying to user on telegram. dont use any special formatting.  \n\n"
        }
      },
      "id": "4f1be58d-ef1c-40f0-869e-def3b0467c89",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        540,
        160
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "// n8n passes input items as an array called 'items'\nconst modelName = items[0].json.Model; // Extract the \"Model\" field\n\nreturn [\n  {\n    json: {\n      model: modelName\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        300,
        160
      ],
      "id": "7e79e066-1c9c-47de-b983-0e04cc896f94",
      "name": "Model"
    },
    {
      "parameters": {},
      "id": "eb1e0b16-ae0e-42c1-8722-5bd18d19090c",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        100,
        680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Execute Workflow Trigger').first().json.chat_id }}",
        "binaryData": true,
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "973943c2-3b95-473b-9839-8ec5b4025b16",
      "name": "Send back an image",
      "type": "n8n-nodes-base.telegram",
      "position": [
        560,
        680
      ],
      "typeVersion": 1.1,
      "webhookId": "72f17519-55f9-438d-ae06-0b87fd0d07b4",
      "credentials": {
        "telegramApi": {
          "id": "XsA3XsMwgoF9YT5p",
          "name": "CustomLLM chat"
        }
      }
    },
    {
      "parameters": {
        "fields": {
          "values": [
            {
              "name": "response",
              "stringValue": "Success"
            }
          ]
        },
        "options": {}
      },
      "id": "7609e6ca-4005-4aa8-a54b-a1eaf52cd02b",
      "name": "add response field",
      "type": "n8n-nodes-base.set",
      "position": [
        800,
        680
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "content": "## Generate an image with Dall-E 3 and send it via Telegram",
        "height": 387,
        "width": 952
      },
      "id": "88c5cc4a-ce22-4e86-9ed8-576fa69b96eb",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        40,
        560
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "model": "={{ $('Model').item.json.model }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        440,
        360
      ],
      "id": "3d344145-8534-471a-bcec-8133e823176d",
      "name": "OpenRouter Chat",
      "credentials": {
        "openRouterApi": {
          "id": "aJs0fLPj2VfVgihE",
          "name": "OpenRouter Cred"
        }
      }
    },
    {
      "parameters": {
        "sessionKey": "=chat_with_{{ $('Telegram Trigger').item.json.message.chat.id }}",
        "contextWindowLength": 10
      },
      "id": "d2f1ff3b-5931-4ca4-a2ee-f3e138153080",
      "name": "Window Buffer Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        620,
        360
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "image",
        "model": "gpt-image-1",
        "prompt": "={{ $json.query }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        320,
        680
      ],
      "id": "10cd3adc-7b23-4e65-8122-062f3294c2b4",
      "name": "Gen Image",
      "credentials": {
        "openAiApi": {
          "id": "e2MbTqjsZZRhl3zg",
          "name": "OpenAi Cred"
        }
      }
    },
    {
      "parameters": {
        "name": "Draw_Dalle_image",
        "description": "Call this tool to request the image model, when the user asks to draw something. Please send the user request for an image as an inline query string.",
        "workflowId": "={{ $workflow.id }}",
        "fields": {
          "values": [
            {
              "name": "chat_id",
              "stringValue": "={{ $('Telegram Trigger').item.json.message.from.id }}"
            }
          ]
        }
      },
      "id": "3e5737fc-8126-4561-8710-c82e7a888f8b",
      "name": "Image Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        780,
        360
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {
    "Telegram Trigger": [
      {
        "json": {
          "update_id": 965611296,
          "message": {
            "message_id": 229,
            "from": {
              "id": 1715955554,
              "is_bot": false,
              "first_name": "nc31",
              "username": "nc31_PK",
              "language_code": "en"
            },
            "chat": {
              "id": 1715955554,
              "first_name": "nc31",
              "username": "nc31_PK",
              "type": "private"
            },
            "date": 1750675099,
            "text": "I am already uploading a video with captions on YouTube via N8N. However, YT added another layer of captions . How to disable that?"
          }
        }
      }
    ]
  },
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "NocoDB",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NocoDB3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Telegram3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Models": {
      "main": [
        [
          {
            "node": "Ask model preference",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask for LLM": {
      "main": [
        [
          {
            "node": "NocoDB1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Chosen Model": {
      "main": [
        [
          {
            "node": "Update History",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ask model preference": {
      "main": [
        [
          {
            "node": "Select Chosen Model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "LLM Names Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Names Set": {
      "main": [
        [
          {
            "node": "Ask for LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB1": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "List Models",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update History": {
      "main": [
        [
          {
            "node": "NocoDB2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB2": {
      "main": [
        [
          {
            "node": "Start Chatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "NocoDB3": {
      "main": [
        [
          {
            "node": "Model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Gen Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send back an image": {
      "main": [
        [
          {
            "node": "add response field",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Gen Image": {
      "main": [
        [
          {
            "node": "Send back an image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fb20a17e-8a75-4345-b76e-deaedba4758f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3f9c83d1cb6a2d505a6ce0239037e5b775aee49d98c6b36ee2dad2fffe732a07"
  },
  "id": "kP8A7NuNZQPBBybw",
  "tags": []
}